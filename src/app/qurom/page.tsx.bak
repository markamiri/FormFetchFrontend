// app/meeting/page.tsx

"use client";

{
  /* FIX In the video the url goes from question 0 -> proxy ->review -> confirm -> Done */
}
import { User } from "lucide-react"; // or "@heroicons/react/24/outline" if you're using Heroicons

import React, { useState, useEffect, useRef } from "react";
import {
  FaCalendar,
  FaMapMarkerAlt,
  FaUser,
  FaDownload,
  FaTimes,
} from "react-icons/fa";

import SignaturePad from "signature_pad";

export default function MeetingPage() {
  const [step, setStep] = useState(1);
  const [customNominee, setCustomNominee] = useState("");
  const [nominees, setNominees] = useState(["Inge Russell", "Maija Nappi"]);
  const [proxyHolder, setProxyHolder] = useState("");
  const [selectedRep, setSelectedRep] = useState("");
  const [fallbackEnabled, setFallbackEnabled] = useState(true);
  const [faqOpen, setFaqOpen] = useState("");
  const [authorization, setAuthorization] = useState<number | null>(null);
  const [signature, setSignature] = useState("");
  const [ownershipSelection, setOwnershipSelection] = useState<number | null>(
    null
  );

  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const signaturePadRef = useRef<SignaturePad | null>(null);

  const [initials, setInitials] = useState("");

  const sigCanvasRef = useRef<SignatureCanvasType | null>(null);
  useEffect(() => {
    if (step === 6 && canvasRef.current) {
      console.log("✅ Canvas is mounted on step 6");
      signaturePadRef.current = new SignaturePad(canvasRef.current);
    }
  }, [step]);

  const [signatureDataUrl, setSignatureDataUrl] = useState(null);

  const [section1Votes, setSection1Votes] = useState(["", "", ""]);
  const [section2Votes, setSection2Votes] = useState(["", "", ""]);
  const [specificMatters, setSpecificMatters] = useState([
    { text: "", yes: false, no: false },
    { text: "", yes: false, no: false },
    { text: "", yes: false, no: false },
  ]);
  const [removalVotes, setRemovalVotes] = useState([
    { name: "", favour: false, against: false },
    { name: "", favour: false, against: false },
    { name: "", favour: false, against: false },
  ]);

  const formData = {
    address: "MTCC 1034",
    suite: "Test",
    name: "Tim Bourdignon",
    email: "tim@ct-quality.com",
  };

  const handleClear = () => {
    signaturePadRef.current?.clear();
    setSignatureDataUrl("");
  };

  const handleNomineeAdd = () => {
    if (customNominee.trim() && nominees.length < 5) {
      setNominees([...nominees, customNominee.trim()]);
      setCustomNominee("");
    }
  };

  const removeNominee = (name: string) => {
    setNominees(nominees.filter((n) => n !== name));
  };

  const toggleFaq = (item: string) => {
    setFaqOpen(faqOpen === item ? "" : item);
  };

  const handleSubmit = async () => {
    const formattedSignature = signature
      .split(" ")
      .filter(Boolean)
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(" ");

    const completeFormData = {
      formData,
      ownershipSelection,
      proxyData,
      votingInstruction,
      votingSections,
      section1Votes,
      section2Votes,
      specificMatters,
      removalVotes,
      signature: formattedSignature, // ✅ use the formatted version here

      initials, // ✅ Add this line
    };

    console.log("Final Form Data (Ready to Submit):", completeFormData);
    try {
      const res = await fetch("http://localhost:5000/api/submit-form", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(completeFormData),
      });

      const result = await res.json();
      console.log("✅ Backend Response:", result);
      setStep(8);
    } catch (err) {
      console.error("❌ Error submitting to backend:", err);
    }
  };

  const downloadTextFile = (data: any, filename: string) => {
    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: "text/plain",
    });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    a.click();

    URL.revokeObjectURL(url);
  };

  const Stepper = () => (
    <div className="flex justify-center gap-8 mt-8 text-center text-black">
      {["Start", "Questions", "Finish"].map((label, i) => (
        <div key={label} className="flex flex-col items-center">
          <div
            className={`w-10 h-10 rounded-full flex items-center justify-center font-bold ${
              i + 1 === step
                ? "bg-indigo-700 text-white"
                : "bg-gray-300 text-black"
            }`}
          >
            {i + 1}
          </div>
          <span className="mt-2 text-sm font-medium">{label}</span>
        </div>
      ))}
    </div>
  );
  const [votingSections, setVotingSections] = useState<string[]>([]);

  const [votingInstruction, setVotingInstruction] = useState("");
  const [proxyData, setProxyData] = useState({
    proxyA: "",
    proxyB: "",
    proxyDate: "", // auto-filled
    selectedRepresentative: "", // "President" or "Secretary"
    fallbackAccepted: false,
  });

  useEffect(() => {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, "0");
    const dd = String(today.getDate()).padStart(2, "0");
    const formatted = `${yyyy}-${mm}-${dd}`;
    setProxyData((prev) => ({ ...prev, proxyDate: formatted }));
  }, []);

  return (
    <div className="min-h-screen bg-gray-100 p-6 font-sans">
      <header className="bg-indigo-700 text-white px-6 py-4 rounded">
        <h1 className="text-2xl font-bold">MTCC 1034 - Hybrid AGM 2025</h1>
      </header>
      <Stepper />
      {/* Step 1 */}
      {step === 1 && (
        <div className="bg-white shadow-md rounded p-6 mt-10 max-w-3xl mx-auto text-black">
          <h2 className="text-lg font-semibold mb-4">
            Election of two (2) Directors to the Board
          </h2>
          <div className="space-y-2 text-sm text-gray-700">
            <div className="flex items-center gap-2">
              <FaUser className="text-indigo-700" />
              <span>
                <strong>Member Info:</strong> {formData.name} ({formData.suite})
              </span>
            </div>
            <div className="flex items-center gap-2">
              <FaCalendar className="text-indigo-700" />
              <span>
                <strong>When:</strong> Monday, May 26th, 2025 – 7:00 PM EDT
              </span>
            </div>
            <div className="flex items-center gap-2">
              <FaMapMarkerAlt className="text-indigo-700" />
              <span>
                <strong>Where:</strong> In Person in Party Room & Virtually via
                GetQuorum
              </span>
            </div>
            <div className="mt-4">
              <div className="flex items-center gap-2 mb-1">
                <FaDownload className="text-indigo-700" />
                <strong>Meeting Documents:</strong>
              </div>
              <ul className="list-disc list-inside text-red-600">
                {[
                  { name: "Virtual User Guide", size: "614.83 KB" },
                  { name: "Preliminary Notice", size: "272.62 KB" },
                  { name: "Notice of Annual General Meeting", size: "1.65 MB" },
                  { name: "Proxy Instructions", size: "1.66 MB" },
                  { name: "PIC with related attachments", size: "9.14 MB" },
                ].map((doc, i) => (
                  <li key={i}>
                    <a
                      href="#"
                      className="underline hover:text-red-800 transition"
                    >
                      MTCC 1034: {doc.name} ({doc.size})
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          <div className="flex justify-center mt-8">
            <button
              onClick={() => setStep(2)}
              className="bg-indigo-700 text-white px-6 py-3 rounded font-bold hover:bg-indigo-800 transition"
            >
              LET’S GET STARTED
            </button>
          </div>
        </div>
      )}
      {step === 2 && (
        <div className="bg-white shadow-md rounded p-6 mt-10 max-w-3xl mx-auto text-black">
          <h2 className="text-xl font-semibold mb-4">I am (we are)</h2>

          <div className="space-y-4 text-sm text-gray-800">
            <label className="flex items-center gap-3">
              <input
                type="checkbox"
                className="form-checkbox h-5 w-5 text-indigo-600"
                checked={ownershipSelection === 1}
                onChange={() => setOwnershipSelection(1)}
              />
              the registered owner(s)
            </label>

            <label className="flex items-center gap-3">
              <input
                type="checkbox"
                className="form-checkbox h-5 w-5 text-indigo-600"
                checked={ownershipSelection === 2}
                onChange={() => setOwnershipSelection(2)}
              />
              authorized to act on behalf of the registered owner(s)
            </label>

            <label className="flex items-center gap-3">
              <input
                type="checkbox"
                className="form-checkbox h-5 w-5 text-indigo-600"
                checked={ownershipSelection === 3}
                onChange={() => setOwnershipSelection(3)}
              />
              the mortgagee(s)
            </label>

            <label className="flex items-center gap-3">
              <input
                type="checkbox"
                className="form-checkbox h-5 w-5 text-indigo-600"
                checked={ownershipSelection === 4}
                onChange={() => setOwnershipSelection(4)}
              />
              authorized to act on behalf of the mortgagee(s)
            </label>
          </div>

          <div className="flex justify-between mt-8">
            <button
              onClick={() => setStep(1)}
              className="px-4 py-2 bg-gray-300 text-black rounded"
            >
              BACK
            </button>
            <button
              onClick={() => {
                console.log(
                  "✅ Ownership selection (1–4):",
                  ownershipSelection
                );
                setStep(3);
              }}
              disabled={!ownershipSelection}
              className={`px-4 py-2 rounded ${
                ownershipSelection
                  ? "bg-indigo-700 text-white"
                  : "bg-gray-400 text-white cursor-not-allowed"
              }`}
            >
              NEXT STEP
            </button>
          </div>
        </div>
      )}

      {step === 3 && (
        <div className="bg-white shadow-md rounded p-6 mt-10 max-w-3xl mx-auto text-black">
          <p className="text-sm mb-6 text-gray-700">
            I (we) appoint the proxy named in row A below, or, failing him or
            her, the proxy named in row B below, to attend and vote on my (our)
            behalf at the meeting of owners to be held on:
          </p>

          {/* Date Field */}
          <div className="mb-4">
            <label className="text-sm text-gray-600">Date (yyyy-mm-dd):</label>
            <input
              type="text"
              value={proxyData.proxyDate}
              readOnly
              className="w-full mt-1 border border-gray-300 rounded px-3 py-2 bg-gray-100 text-gray-700"
            />
          </div>

          {/* Proxy A */}
          {!proxyData.selectedRepresentative && (
            <div className="mb-4">
              <label className="text-sm text-gray-600">Name of Proxy A:</label>
              <input
                type="text"
                value={proxyData.proxyA}
                onChange={(e) =>
                  setProxyData((prev) => ({ ...prev, proxyA: e.target.value }))
                }
                className="w-full mt-1 border border-gray-300 rounded px-3 py-2"
              />
            </div>
          )}

          {/* Proxy B */}
          {!proxyData.selectedRepresentative && (
            <div className="mb-4">
              <label className="text-sm text-gray-600">Name of Proxy B:</label>
              <input
                type="text"
                value={proxyData.proxyB}
                onChange={(e) =>
                  setProxyData((prev) => ({ ...prev, proxyB: e.target.value }))
                }
                className="w-full mt-1 border border-gray-300 rounded px-3 py-2"
              />
            </div>
          )}

          {/* Choose representative */}
          {!proxyData.proxyA && !proxyData.proxyB && (
            <div className="mb-6">
              <p className="text-sm font-medium mb-2 text-gray-700">
                Or choose from one of the following representatives who will be
                in attendance:
              </p>
              <div className="flex gap-4">
                {["President", "Secretary"].map((role) => (
                  <button
                    key={role}
                    type="button"
                    onClick={() =>
                      setProxyData((prev) => ({
                        ...prev,
                        selectedRepresentative:
                          prev.selectedRepresentative === role ? null : role,
                      }))
                    }
                    className={`flex items-center gap-2 px-4 py-2 rounded-full border transition ${
                      proxyData.selectedRepresentative === role
                        ? "bg-indigo-600 text-white"
                        : "bg-gray-100 text-black"
                    }`}
                  >
                    <div className="bg-white rounded-full p-1">
                      <User
                        className={`w-5 h-5 ${
                          proxyData.selectedRepresentative === role
                            ? "text-indigo-600"
                            : "text-black"
                        }`}
                      />
                    </div>
                    <span>
                      {role === "President"
                        ? "President of the Corporation"
                        : "Secretary of the Corporation"}
                    </span>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Fallback checkbox */}
          {!proxyData.selectedRepresentative && (
            <div className="mb-4">
              <label className="flex items-start gap-2 text-sm text-gray-700">
                <input
                  type="checkbox"
                  className="mt-1 form-checkbox text-indigo-600"
                  checked={proxyData.fallbackAccepted}
                  onChange={(e) =>
                    setProxyData((prev) => ({
                      ...prev,
                      fallbackAccepted: e.target.checked,
                    }))
                  }
                />
                Should my designated proxy holder fail to attend the meeting, I
                agree that President of the Corporation or Secretary of the
                Corporation shall be appointed as my fallback proxy holder.
              </label>
            </div>
          )}

          <p className="text-sm text-gray-600 italic mt-4">
            I (we) revoke all proxies previously given.
          </p>

          <div className="flex justify-between mt-8">
            <button
              onClick={() => setStep(2)}
              className="px-4 py-2 bg-gray-300 text-black rounded"
            >
              BACK
            </button>
            <button
              onClick={() => {
                console.log("✅ Proxy data saved:", proxyData);
                setStep(4);
              }}
              className="px-4 py-2 bg-indigo-700 text-white rounded"
            >
              NEXT STEP
            </button>
          </div>
        </div>
      )}

      {step === 4 && (
        <div className="bg-white shadow-md rounded p-6 mt-10 max-w-3xl mx-auto text-black text-sm leading-relaxed">
          <h2 className="text-base font-semibold mb-4">
            Please check only one of the three boxes below:
          </h2>

          <div className="space-y-9">
            <label className="flex items-start gap-3">
              <input
                type="checkbox"
                className="mt-1 h-5 w-5 text-indigo-600"
                checked={votingInstruction === "option1"}
                onChange={() => setVotingInstruction("option1")}
              />
              <span>
                The proxy is not authorized to vote on my (our) behalf with
                respect to any matter at the meeting, including matters of
                routine procedure.
                <br />
                <strong>
                  Instruction for person filling out this form:
                </strong>{" "}
                Check this box if you are appointing the proxy only to count
                towards quorum. If this box is checked, then the rest of the
                form should <u>not</u> be filled out.
              </span>
            </label>

            <label className="flex items-start gap-3">
              <input
                type="checkbox"
                className="mt-1 h-5 w-5 text-indigo-600"
                checked={votingInstruction === "option2"}
                onChange={() => setVotingInstruction("option2")}
              />
              <span>
                The proxy may vote on my (our) behalf only with respect to
                matters of routine procedure at the meeting, and no other
                matters, as I (we) could do if personally present at the
                meeting.
                <br />
                <strong>
                  Instruction for person filling out this form:
                </strong>{" "}
                If this box is checked, then the rest of the form should{" "}
                <u>not</u> be filled out.
              </span>
            </label>

            <label className="flex items-start gap-3">
              <input
                type="checkbox"
                className="mt-1 h-5 w-5 text-indigo-600"
                checked={votingInstruction === "option3"}
                onChange={() => setVotingInstruction("option3")}
              />
              <span>
                The proxy may nominate candidates or may vote on my (our) behalf
                with respect to all matters that may come before the meeting,
                subject to any instructions set out below, as I (we) could do if
                personally present at the meeting.
                <br />
                <strong>
                  Instruction for person filling out this form:
                </strong>{" "}
                If this box is checked and you do not provide instructions with
                respect to any part of the rest of this form, you are giving
                your proxy the authority to nominate any candidates or vote in
                any manner with respect to that part of the form, as you could
                do if you were personally present at the meeting.
              </span>
            </label>
          </div>

          <div className="flex justify-between mt-8">
            <button
              onClick={() => setStep(3)}
              className="px-4 py-2 bg-gray-300 text-black rounded"
            >
              BACK
            </button>
            <button
              onClick={() => {
                console.log("✅ Selected voting option:", votingInstruction);
                if (votingInstruction === "option3") {
                  setStep(6); // if they picked the full proxy voting option
                } else {
                  setStep(5); // if they picked limited or quorum-only options
                }
              }}
              className="px-4 py-2 bg-indigo-700 text-white rounded"
            >
              NEXT STEP
            </button>
          </div>
        </div>
      )}

      {/* Step 6: Legal Stuff */}
      {step === 5 && (
        <div className="bg-white shadow-md rounded p-6 mt-10 max-w-3xl mx-auto">
          <h2 className="text-xl font-semibold mb-4 text-black">
            The Legal Stuff
          </h2>
          <p className="text-sm text-gray-600 mb-4">
            Please review the sample form below before submitting. You may need
            to scroll to view the full content. A copy will be emailed to you
            upon submission.
          </p>
          <iframe
            src="http://localhost:5000/api/final-pdf"
            title="Preview PDF"
            width="100%"
            height="600px"
            className="border rounded shadow mb-6"
          />

          {/* Buttons */}
          <div className="flex justify-between mt-8">
            <button
              onClick={() => setStep(4)}
              className="px-4 py-2 bg-gray-300 text-black rounded"
            >
              BACK
            </button>
            <button
              onClick={handleSubmit}
              className="px-4 py-2 bg-indigo-700 text-white rounded"
            >
              SUBMIT FORM
            </button>
          </div>
        </div>
      )}

      {step === 6 && (
        <div className="bg-white shadow-md rounded p-6 mt-10 max-w-3xl mx-auto text-black text-sm leading-relaxed">
          <h2 className="text-base font-semibold mb-4">
            Please select the sections you are voting on:
          </h2>

          <div className="space-y-4">
            {/* Section 1 */}
            <div>
              <label className="flex items-start gap-2">
                <input
                  type="checkbox"
                  className="mt-1 h-5 w-5 text-indigo-600"
                  checked={votingSections.includes("section1")}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setVotingSections((prev) => [...prev, "section1"]);
                    } else {
                      setVotingSections((prev) =>
                        prev.filter((s) => s !== "section1")
                      );
                      setSection1Votes(["", "", ""]); // <-- ✅ new behavior to reset Section 1
                    }
                  }}
                />
                <span>
                  <strong>Section 1.</strong> Voting to elect candidates to
                  vacant positions on the board that all owners may vote for:
                </span>
              </label>

              {votingSections.includes("section1") && (
                <div className="mt-4">
                  <h3 className="font-semibold mb-2">
                    Enter Candidate Votes (Section 1)
                  </h3>
                  <table className="w-full border border-gray-400 text-left text-sm">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="border px-4 py-2 w-1/4">
                          Order of vote (1, 2, 3...)
                        </th>
                        <th className="border px-4 py-2">
                          Candidates for the Position(s) on the Board
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {[1, 2, 3].map((number, idx) => (
                        <tr key={number}>
                          <td className="border px-2 py-1">
                            <input
                              type="text"
                              value={number}
                              readOnly
                              className="w-full px-2 py-1 border rounded bg-gray-100 text-gray-700"
                            />
                          </td>
                          <td className="border px-2 py-1">
                            <input
                              type="text"
                              value={section1Votes[idx]}
                              onChange={(e) => {
                                const updated = [...section1Votes];
                                updated[idx] = e.target.value;
                                setSection1Votes(updated);
                              }}
                              placeholder="Candidate Name"
                              className="w-full px-2 py-1 border rounded"
                            />
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>

            {/* Section 2 */}
            <div>
              <label className="flex items-start gap-2">
                <input
                  type="checkbox"
                  className="mt-1 h-5 w-5 text-indigo-600"
                  checked={votingSections.includes("section2")}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setVotingSections((prev) => [...prev, "section2"]);
                    } else {
                      setVotingSections((prev) =>
                        prev.filter((s) => s !== "section2")
                      );
                      setSection2Votes(["", "", ""]); // ✅ This is the new behavior added
                    }
                  }}
                />
                <span>
                  <strong>Section 2.</strong> Voting to elect candidates to any
                  vacant position on the board that only owners of
                  owner-occupied units may vote for:
                </span>
              </label>

              {votingSections.includes("section2") && (
                <div className="mt-4">
                  <h3 className="font-semibold mb-2">
                    Enter Candidate Votes (Section 2)
                  </h3>
                  <table className="w-full border border-gray-400 text-left text-sm">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="border px-4 py-2 w-1/4">
                          Order of vote (enter 1, 2, 3, etc.)
                        </th>
                        <th className="border px-4 py-2">
                          Candidates for the Position(s) on the Board
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {[1, 2, 3].map((number, idx) => (
                        <tr key={number}>
                          <td className="border px-2 py-1">
                            <input
                              type="text"
                              value={number}
                              readOnly
                              className="w-full px-2 py-1 border rounded bg-gray-100 text-gray-700"
                            />
                          </td>
                          <td className="border px-2 py-1">
                            <input
                              type="text"
                              value={section2Votes[idx]}
                              onChange={(e) => {
                                const updated = [...section2Votes];
                                updated[idx] = e.target.value;
                                setSection2Votes(updated);
                              }}
                              placeholder="Candidate Name"
                              className="w-full px-2 py-1 border rounded"
                            />
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>

            {/* Section 3 */}
            <div>
              <label className="flex items-start gap-2">
                <input
                  type="checkbox"
                  className="mt-1 h-5 w-5 text-indigo-600"
                  checked={votingSections.includes("section3")}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setVotingSections((prev) => [...prev, "section3"]);
                    } else {
                      setVotingSections((prev) =>
                        prev.filter((s) => s !== "section3")
                      );
                      setSpecificMatters([
                        { text: "", yes: false, no: false },
                        { text: "", yes: false, no: false },
                        { text: "", yes: false, no: false },
                      ]);
                    }
                  }}
                />
                <span>
                  <strong>Section 3.</strong> Voting for specific matters:
                </span>
              </label>

              {votingSections.includes("section3") && (
                <div className="mt-4">
                  <h3 className="font-semibold mb-2">Specific Matters</h3>
                  <table className="w-full border border-gray-400 text-sm text-left">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="border px-4 py-2">Specific Matter</th>
                        <th className="border px-4 py-2 text-center">
                          In favour
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {[0, 1, 2].map((index) => {
                        const matter = specificMatters[index].text.trim();
                        const isDisabled = matter === "";
                        return (
                          <tr key={index}>
                            <td className="border px-2 py-1">
                              <input
                                type="text"
                                value={specificMatters[index].text}
                                onChange={(e) => {
                                  const updated = [...specificMatters];
                                  updated[index].text = e.target.value;
                                  setSpecificMatters(updated);
                                }}
                                placeholder="Enter matter"
                                className="w-full px-2 py-1 border rounded"
                              />
                            </td>
                            <td className="border px-2 py-1 text-center">
                              <div className="flex items-center justify-center gap-4">
                                <label className="flex items-center gap-1">
                                  <input
                                    type="checkbox"
                                    checked={specificMatters[index].yes}
                                    onChange={(e) => {
                                      const updated = [...specificMatters];
                                      updated[index].yes = e.target.checked;
                                      updated[index].no = e.target.checked
                                        ? false
                                        : updated[index].no;
                                      setSpecificMatters(updated);
                                    }}
                                    disabled={isDisabled}
                                    className="h-4 w-4"
                                  />
                                  Yes
                                </label>
                                <label className="flex items-center gap-1">
                                  <input
                                    type="checkbox"
                                    checked={specificMatters[index].no}
                                    onChange={(e) => {
                                      const updated = [...specificMatters];
                                      updated[index].no = e.target.checked;
                                      updated[index].yes = e.target.checked
                                        ? false
                                        : updated[index].yes;
                                      setSpecificMatters(updated);
                                    }}
                                    disabled={isDisabled}
                                    className="h-4 w-4"
                                  />
                                  No
                                </label>
                              </div>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              )}
            </div>

            {/* Section 4 */}
            <div>
              <label className="flex items-start gap-2">
                <input
                  type="checkbox"
                  className="mt-1 h-5 w-5 text-indigo-600"
                  checked={votingSections.includes("section4")}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setVotingSections((prev) => [...prev, "section4"]);
                    } else {
                      setVotingSections((prev) =>
                        prev.filter((s) => s !== "section4")
                      );
                      setRemovalVotes([
                        { name: "", favour: false, against: false },
                        { name: "", favour: false, against: false },
                        { name: "", favour: false, against: false },
                      ]);
                    }
                  }}
                />
                <span>
                  <strong>Section 4.</strong> Voting for removal of directors
                  and election of substitutes:
                </span>
              </label>

              {votingSections.includes("section4") && (
                <div className="mt-4">
                  <h3 className="font-semibold mb-2">Directors for Removal</h3>
                  <table className="w-full border border-gray-400 text-sm text-left">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="border px-4 py-2">Name of Director</th>
                        <th className="border px-4 py-2 text-center">
                          In Favour of Removal
                        </th>
                        <th className="border px-4 py-2 text-center">
                          Against Removal
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {[0, 1, 2].map((index) => {
                        const name = removalVotes[index].name.trim();
                        const isDisabled = name === "";
                        return (
                          <tr key={index}>
                            <td className="border px-2 py-1">
                              <input
                                type="text"
                                value={removalVotes[index].name}
                                onChange={(e) => {
                                  const updated = [...removalVotes];
                                  updated[index].name = e.target.value;
                                  setRemovalVotes(updated);
                                }}
                                placeholder="Director's Name"
                                className="w-full px-2 py-1 border rounded"
                              />
                            </td>
                            <td className="border px-2 py-1 text-center">
                              <input
                                type="checkbox"
                                checked={removalVotes[index].favour}
                                onChange={(e) => {
                                  const updated = [...removalVotes];
                                  updated[index].favour = e.target.checked;
                                  updated[index].against = e.target.checked
                                    ? false
                                    : updated[index].against;
                                  setRemovalVotes(updated);
                                }}
                                disabled={isDisabled}
                                className="h-4 w-4"
                              />
                            </td>
                            <td className="border px-2 py-1 text-center">
                              <input
                                type="checkbox"
                                checked={removalVotes[index].against}
                                onChange={(e) => {
                                  const updated = [...removalVotes];
                                  updated[index].against = e.target.checked;
                                  updated[index].favour = e.target.checked
                                    ? false
                                    : updated[index].favour;
                                  setRemovalVotes(updated);
                                }}
                                disabled={isDisabled}
                                className="h-4 w-4"
                              />
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>

          <div className="flex flex-wrap items-start gap-6 mb-6 mt-5">
            {/* Signature (Full Name) */}
            <div className="flex-1 min-w-[250px]">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Signature (Full Name):
              </label>
              <input
                type="text"
                name="signature"
                value={signature}
                onChange={(e) => setSignature(e.target.value)}
                placeholder="Type your full name"
                className="w-full border rounded px-3 py-2 bg-white text-black"
                required
              />
              <p className="text-xs text-gray-500 mt-1">
                By typing your name, you agree this serves as your legal
                electronic signature under the Ontario ECA.
              </p>
            </div>

            {/* Initials Input */}
            <div className="flex flex-col min-w-[140px]">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Enter your initials:
              </label>
              <input
                type="text"
                value={initials}
                onChange={(e) => setInitials(e.target.value.toUpperCase())}
                maxLength={4}
                className="px-3 py-2 border border-gray-300 rounded"
                placeholder="e.g. JD"
              />
            </div>
          </div>

          <div className="flex justify-between mt-8">
            <button
              onClick={() => setStep(4)}
              className="px-4 py-2 bg-gray-300 text-black rounded"
            >
              BACK
            </button>
            <button
              onClick={async () => {
                // Validation for Section 3
                const invalidSection3 = specificMatters.some((item) => {
                  const hasText = item.text.trim() !== "";
                  const selectedOne = item.yes || item.no;
                  return hasText && !selectedOne;
                });

                // Validation for Section 4
                const invalidSection4 = removalVotes.some((item) => {
                  const hasText = item.name.trim() !== "";
                  const selectedOne = item.favour || item.against;
                  return hasText && !selectedOne;
                });

                if (invalidSection3 || invalidSection4) {
                  alert(
                    "⚠️ Please ensure that all filled rows in Section 3 and Section 4 have a corresponding vote selected."
                  );
                  return;
                }
                if (!signature || signature.trim() === "") {
                  alert("Please provide a signature.");
                  return;
                }

                const formattedSignature = signature
                  .split(" ")
                  .filter(Boolean)
                  .map(
                    (word) =>
                      word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                  )
                  .join(" ");
                const dataUrl = formattedSignature;

                const completeFormData = {
                  formData,
                  ownershipSelection,
                  proxyData,
                  votingInstruction,
                  votingSections,
                  section1Votes,
                  section2Votes,
                  specificMatters,
                  removalVotes,
                  signature: formattedSignature,
                  initials,
                };

                console.log(
                  "📋 Final Form Data (Ready to Submit):",
                  completeFormData
                );
                downloadTextFile(completeFormData, "voting_form_data.txt");
                await handleSubmit();
                console.log(
                  "handlesubmit is being called is the pdf being updated?"
                );

                setStep(5);
              }}
              className="px-4 py-2 bg-indigo-700 text-white rounded"
            >
              NEXT STEP
            </button>
          </div>
        </div>
      )}

      {/* Step 8: Confirmation Screen */}
      {step === 8 && (
        <div className="bg-white shadow-md rounded p-6 mt-10 max-w-3xl mx-auto text-center text-black">
          {/* Icon */}
          <div className="text-4xl text-indigo-700 mb-4">✅</div>

          {/* Message */}
          <h2 className="text-2xl font-bold mb-2">
            Your Form Has Been Received!
          </h2>
          <p className="text-sm text-gray-700 mb-4">
            A copy has been emailed to you for your records.
          </p>

          <p className="text-sm text-gray-600 mb-2">
            Please contact us at{" "}
            <a
              href="mailto:support@getquorum.com"
              className="text-red-500 underline"
            >
              support@getquorum.com
            </a>{" "}
            if you haven’t received it within 24 hours. Check your spam or junk
            mail folder just in case.
          </p>

          {/* Download Button Placeholder */}
          <div className="mt-6">
            <button className="bg-indigo-700 text-white font-medium px-6 py-2 rounded hover:bg-indigo-800">
              ⬇ DOWNLOAD A COPY
            </button>
          </div>

          {/* Start Again */}
          <div className="mt-10">
            <p className="text-sm text-gray-600 mb-2">
              Want to change your answers? You can resubmit your vote at any
              time until voting is closed.
            </p>
            <button
              onClick={() => {
                // Optional: Reset all other state too
                setStep(1);
              }}
              className="bg-red-500 text-white px-6 py-2 rounded font-semibold hover:bg-red-600"
            >
              START AGAIN
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
